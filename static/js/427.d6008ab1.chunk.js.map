{"version":3,"file":"static/js/427.d6008ab1.chunk.js","mappings":"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","sources":["components/BackgroundScene.jsx"],"sourcesContent":["\r\nimport { useRef, useMemo, useState, useEffect } from 'react';\r\nimport { Canvas, useFrame } from '@react-three/fiber';\r\nimport { OrbitControls } from '@react-three/drei';\r\nimport * as THREE from 'three';\r\n\r\n// Individual crystal component\r\nconst Crystal = ({ position, rotation, scale, color, emissive, darkMode }) => {\r\n  const crystalRef = useRef();\r\n  const initialPosition = useMemo(() => [...position], [position]);\r\n  const initialRotation = useMemo(() => [...rotation], [rotation]);\r\n  \r\n  // Custom seed for this crystal's animation\r\n  const seed = useMemo(() => Math.random() * 100, []);\r\n  \r\n  // Animate crystal with gentle floating movement\r\n  useFrame(({ clock }) => {\r\n    if (crystalRef.current) {\r\n      const time = clock.getElapsedTime();\r\n      \r\n      // Subtle position changes\r\n      crystalRef.current.position.y = initialPosition[1] + Math.sin(time * 0.4 + seed) * 0.1;\r\n      \r\n      // Gentle rotation\r\n      crystalRef.current.rotation.x = initialRotation[0] + Math.sin(time * 0.2 + seed) * 0.03;\r\n      crystalRef.current.rotation.y = initialRotation[1] + time * 0.05 + Math.sin(time * 0.1) * 0.02;\r\n      crystalRef.current.rotation.z = initialRotation[2] + Math.cos(time * 0.3 + seed) * 0.03;\r\n    }\r\n  });\r\n  \r\n  return (\r\n    <group \r\n      ref={crystalRef}\r\n      position={position}\r\n      rotation={rotation}\r\n      scale={scale}\r\n    >\r\n      {/* Use octahedron for crystalline look */}\r\n      <mesh>\r\n        <octahedronGeometry args={[1, 0]} />\r\n        <meshPhysicalMaterial\r\n          color={color}\r\n          emissive={emissive}\r\n          emissiveIntensity={darkMode ? 0.3 : 0.1}\r\n          roughness={0.2}\r\n          metalness={0.3}\r\n          opacity={darkMode ? 0.9 : 0.7}\r\n          transparent\r\n          envMapIntensity={0.8}\r\n          transmission={0.2}\r\n        />\r\n      </mesh>\r\n    </group>\r\n  );\r\n};\r\n\r\n// Cluster of crystals forming a structure\r\nconst CrystalCluster = ({ position, count = 7, size = 1, colorVariation = 0.2, darkMode }) => {\r\n  const clusterRef = useRef();\r\n  \r\n  // Generate crystal configurations\r\n  const crystals = useMemo(() => {\r\n    const baseColor = darkMode \r\n      ? new THREE.Color(\"#4f83c0\") \r\n      : new THREE.Color(\"#6495ED\");\r\n    \r\n    const baseEmissive = darkMode \r\n      ? new THREE.Color(\"#2a4a7a\") \r\n      : new THREE.Color(\"#4682B4\");\r\n    \r\n    return Array.from({ length: count }, (_, i) => {\r\n      // Create variation in crystal placements\r\n      const localPosition = [\r\n        (Math.random() - 0.5) * size * 1.2,\r\n        (Math.random() - 0.5) * size * 1.2,\r\n        (Math.random() - 0.5) * size * 1.2\r\n      ];\r\n      \r\n      // Random rotation\r\n      const rotation = [\r\n        Math.random() * Math.PI * 2,\r\n        Math.random() * Math.PI * 2,\r\n        Math.random() * Math.PI * 2\r\n      ];\r\n      \r\n      // Random scale (some bigger, some smaller)\r\n      const baseScale = (Math.random() * 0.5 + 0.5) * size;\r\n      const scaleVector = [\r\n        baseScale * (0.8 + Math.random() * 0.4),\r\n        baseScale * (0.8 + Math.random() * 0.4),\r\n        baseScale * (0.8 + Math.random() * 0.4)\r\n      ];\r\n      \r\n      // Slight color variations\r\n      const hue = Math.random() * colorVariation * 2 - colorVariation;\r\n      const colorVariant = baseColor.clone().offsetHSL(hue, 0.1, 0.1);\r\n      const emissiveVariant = baseEmissive.clone().offsetHSL(hue, 0.1, 0.1);\r\n      \r\n      return {\r\n        id: i,\r\n        position: localPosition,\r\n        rotation,\r\n        scale: scaleVector,\r\n        color: colorVariant,\r\n        emissive: emissiveVariant\r\n      };\r\n    });\r\n  }, [count, size, colorVariation, darkMode]);\r\n  \r\n  // Animate the entire cluster with slow rotation\r\n  useFrame(({ clock }) => {\r\n    if (clusterRef.current) {\r\n      const time = clock.getElapsedTime();\r\n      clusterRef.current.rotation.y = time * 0.05;\r\n    }\r\n  });\r\n  \r\n  return (\r\n    <group ref={clusterRef} position={position}>\r\n      {crystals.map(crystal => (\r\n        <Crystal\r\n          key={crystal.id}\r\n          position={crystal.position}\r\n          rotation={crystal.rotation}\r\n          scale={crystal.scale}\r\n          color={crystal.color}\r\n          emissive={crystal.emissive}\r\n          darkMode={darkMode}\r\n        />\r\n      ))}\r\n    </group>\r\n  );\r\n};\r\n\r\n// Multiple crystal clusters for visual interest\r\nconst CrystalStructures = ({ darkMode }) => {\r\n  const structuresRef = useRef();\r\n  \r\n  // Generate multiple crystal clusters at different positions\r\n  const clusters = useMemo(() => {\r\n    return [\r\n      { id: 1, position: [-5, -1, -2], count: 5, size: 0.6 },\r\n      { id: 2, position: [4, 2, -3], count: 7, size: 0.8 },\r\n      { id: 3, position: [0, -2, 1], count: 6, size: 0.7 },\r\n      { id: 4, position: [-3, 3, 0], count: 4, size: 0.5 },\r\n      { id: 5, position: [5, -2, 2], count: 8, size: 0.9 },\r\n    ];\r\n  }, []);\r\n\r\n  // Very subtle movement of the entire structure\r\n  useFrame(({ clock }) => {\r\n    if (structuresRef.current) {\r\n      const time = clock.getElapsedTime();\r\n      structuresRef.current.rotation.y = Math.sin(time * 0.1) * 0.2;\r\n      structuresRef.current.position.y = Math.sin(time * 0.2) * 0.3;\r\n    }\r\n  });\r\n  \r\n  return (\r\n    <group ref={structuresRef}>\r\n      {clusters.map(cluster => (\r\n        <CrystalCluster\r\n          key={cluster.id}\r\n          position={cluster.position}\r\n          count={cluster.count}\r\n          size={cluster.size}\r\n          darkMode={darkMode}\r\n        />\r\n      ))}\r\n    </group>\r\n  );\r\n};\r\n\r\n// Background ambient particles\r\nconst AmbientParticles = ({ count = 100, darkMode }) => {\r\n  const particlesRef = useRef();\r\n  \r\n  // Generate particles\r\n  const particles = useMemo(() => {\r\n    return Array.from({ length: count }, () => ({\r\n      position: [\r\n        (Math.random() - 0.5) * 30,\r\n        (Math.random() - 0.5) * 30,\r\n        (Math.random() - 0.5) * 15\r\n      ],\r\n      size: Math.random() * 0.08 + 0.02\r\n    }));\r\n  }, [count]);\r\n  \r\n  // Subtle sparkle effect\r\n  useFrame(({ clock }) => {\r\n    if (particlesRef.current) {\r\n      const time = clock.getElapsedTime();\r\n      particlesRef.current.children.forEach((particle, i) => {\r\n        // Make particles twinkle by changing opacity\r\n        const opacity = 0.3 + Math.sin(time * 0.5 + i) * 0.2;\r\n        particle.material.opacity = opacity;\r\n      });\r\n    }\r\n  });\r\n  \r\n  return (\r\n    <group ref={particlesRef}>\r\n      {particles.map((particle, i) => (\r\n        <mesh key={i} position={particle.position}>\r\n          <sphereGeometry args={[particle.size, 8, 8]} />\r\n          <meshBasicMaterial \r\n            color={darkMode ? \"#6ca0dd\" : \"#87CEEB\"} \r\n            transparent \r\n            opacity={0.5} \r\n          />\r\n        </mesh>\r\n      ))}\r\n    </group>\r\n  );\r\n};\r\n\r\n// Scene content wrapper\r\nconst SceneContent = ({ darkMode }) => {\r\n  return (\r\n    <>\r\n      {/* Lighting - important for crystal reflections */}\r\n      <ambientLight intensity={darkMode ? 0.2 : 0.4} />\r\n      <directionalLight \r\n        position={[5, 5, 5]} \r\n        intensity={darkMode ? 0.7 : 0.9} \r\n        color=\"#ffffff\"\r\n      />\r\n      <pointLight\r\n        position={[-5, 3, 0]}\r\n        intensity={darkMode ? 0.5 : 0.3}\r\n        color={darkMode ? \"#3a6ea5\" : \"#87CEEB\"}\r\n        distance={15}\r\n      />\r\n      \r\n      {/* Main crystal formations */}\r\n      <CrystalStructures darkMode={darkMode} />\r\n      \r\n      {/* Ambient background elements */}\r\n      <AmbientParticles darkMode={darkMode} />\r\n      \r\n      {/* Controls */}\r\n      <OrbitControls \r\n        enableZoom={false} \r\n        enablePan={false} \r\n        enableRotate={false}\r\n        autoRotate\r\n        autoRotateSpeed={0.4}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\n// Main exported component\r\nconst CrystalStructuresScene = ({ darkMode }) => {\r\n  const [mounted, setMounted] = useState(false);\r\n  \r\n  useEffect(() => {\r\n    setMounted(true);\r\n    return () => setMounted(false);\r\n  }, []);\r\n  \r\n  return (\r\n    <div\r\n      className=\"fixed top-0 left-0 w-full h-full z-0 pointer-events-none\"\r\n      aria-hidden=\"true\"\r\n    >\r\n      <Canvas\r\n        gl={{\r\n          antialias: true,\r\n          alpha: true,\r\n          powerPreference: 'default',\r\n          stencil: false,\r\n          depth: false,\r\n        }}\r\n        dpr={[1, 1.5]}\r\n        camera={{ position: [0, 0, 15], fov: 50 }}\r\n        style={{\r\n          background: darkMode \r\n            ? 'radial-gradient(circle at 50% 50%, #101729 0%, #06080f 100%)' \r\n            : 'radial-gradient(circle at 50% 50%, #f0f8ff 0%, #e6f0fa 100%)',\r\n        }}\r\n      >\r\n        {mounted && <SceneContent darkMode={darkMode} />}\r\n      </Canvas>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CrystalStructuresScene;"],"names":["Crystal","_ref","position","rotation","scale","color","emissive","darkMode","crystalRef","useRef","initialPosition","useMemo","initialRotation","seed","Math","random","useFrame","_ref2","clock","current","time","getElapsedTime","y","sin","x","z","cos","_jsx","ref","children","_jsxs","args","emissiveIntensity","roughness","metalness","opacity","transparent","envMapIntensity","transmission","CrystalCluster","_ref3","count","size","colorVariation","clusterRef","crystals","baseColor","THREE","baseEmissive","Array","from","length","_","i","localPosition","PI","baseScale","scaleVector","hue","id","clone","offsetHSL","_ref4","map","crystal","CrystalStructures","_ref5","structuresRef","clusters","_ref6","cluster","AmbientParticles","_ref7","particlesRef","particles","_ref8","forEach","particle","material","SceneContent","_ref9","_Fragment","intensity","distance","OrbitControls","enableZoom","enablePan","enableRotate","autoRotate","autoRotateSpeed","_ref0","mounted","setMounted","useState","useEffect","className","Canvas","gl","antialias","alpha","powerPreference","stencil","depth","dpr","camera","fov","style","background"],"sourceRoot":""}